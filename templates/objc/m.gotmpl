{{define "objc/m"}}// Generated by github.com/hypermusk/hypermusk
// DO NOT EDIT
{{$pkgName := .Name | title}}
{{$apiprefix := .Prefix}}
#import "{{.Name}}.h"

static {{$apiprefix}}{{.Name | title}} * _{{.Name}};
static NSDateFormatter * _dateFormatter;

@implementation NSData (NSString)
- (NSString *) asUTF8String {
    return [[NSString alloc] initWithData:self encoding:NSUTF8StringEncoding];
}
@end

@implementation {{$apiprefix}}{{.Name | title}} : NSObject
+ ({{$apiprefix}}{{.Name | title}} *) get {
	if(!_{{.Name}}) {
		_{{.Name}} = [[{{$apiprefix}}{{.Name | title}} alloc] init];
		if ([_{{.Name}} requestTimeoutInterval] == 0) {
			[_{{.Name}} setRequestTimeoutInterval:10];
		}
	}
	return _{{.Name}};
}

+ (NSDateFormatter *) dateFormatter {
	if(!_dateFormatter) {
		_dateFormatter = [[NSDateFormatter alloc] init];
		[_dateFormatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ssZZZZ"];
	}
	return _dateFormatter;
}

+ (NSDate *) dateFromString:(NSString *)dateString {
	if(!dateString) {
		return nil;
	}

	NSError *error;
	NSRegularExpression *regexp = [NSRegularExpression regularExpressionWithPattern:@"\\.[0-9]*" options:0 error:&error];
	NSAssert(!error, @"Error in regexp");

	NSRange range = NSMakeRange(0, [dateString length]);
	dateString = [regexp stringByReplacingMatchesInString:dateString options:0 range:range withTemplate:@""];

	NSDate *date;
	[[{{$apiprefix}}{{.Name | title}} dateFormatter] getObjectValue:&date forString:dateString range:nil error:&error];
	if(error) {
		if ([[{{$apiprefix}}{{.Name | title}} get] verbose]) NSLog(@"Error formatting date %@: %@ (%@)", dateString, [error localizedDescription], error);
		return nil;
	}
	return date;
}

+ (NSString *) stringFromDate:(NSDate *) date {
	if(!date) {
		return nil;
	}
	NSString * dateString = [[{{$apiprefix}}{{.Name | title}} dateFormatter] stringFromDate:date];
	dateString = [[[dateString substringToIndex:(dateString.length - 3)] stringByAppendingString:@":"] stringByAppendingString:[dateString substringFromIndex:(dateString.length - 2)]];
	return dateString;
}



+ (NSDictionary *) request:(NSURL*)url
		params:(NSDictionary *)params
		stream:(NSInputStream*)stream
		error:(NSError **)error
		completionHandler:(void (^)(NSDictionary *results, NSError *error))completionHandler
{

	{{$apiprefix}}{{$pkgName}} * _api = [{{$apiprefix}}{{$pkgName}} get];
	NSMutableURLRequest *httpRequest = [NSMutableURLRequest requestWithURL:url cachePolicy:NSURLRequestUseProtocolCachePolicy timeoutInterval:[_api requestTimeoutInterval]];

	[httpRequest setHTTPMethod:@"POST"];
	NSData *requestBody;
	if (stream == nil) {
		[httpRequest setValue:@"application/json;charset=utf-8" forHTTPHeaderField:@"Content-Type"];
		requestBody = [NSJSONSerialization dataWithJSONObject:params options:NSJSONWritingPrettyPrinted error:error];
		[httpRequest setHTTPBody:requestBody];
	} else {
		[httpRequest setValue:@"application/octet-stream" forHTTPHeaderField:@"Content-Type"];
		requestBody = [NSJSONSerialization dataWithJSONObject:params options:0 error:error];
		NSData *base64RequestBodyData = [requestBody base64EncodedDataWithOptions:NSDataBase64EncodingEndLineWithLineFeed];
		NSString *paramBase64 = [[NSString alloc ] initWithBytes: [base64RequestBodyData bytes] length:[base64RequestBodyData length] encoding:NSUTF8StringEncoding];

		[httpRequest setValue:paramBase64 forHTTPHeaderField:@"X-HyperMuskStreamParams"];
		[httpRequest setHTTPBodyStream:stream];
	}
	[httpRequest setValue:@"gzip, deflate" forHTTPHeaderField:@"Accept-Encoding"];

	if([_api verbose]) {
		NSLog(@"Request: %@", [requestBody asUTF8String]);
	}

	if(*error != nil) {
		return nil;
	}

	if (completionHandler == nil) {
		NSURLResponse  *response = nil;
		NSData *returnData = [NSURLConnection sendSynchronousRequest:httpRequest returningResponse:&response error:error];
		if(*error != nil || returnData == nil) {
			return nil;
		}
		if([_api verbose]) {
			NSLog(@"Response: %@", [returnData asUTF8String]);
		}
		return [NSJSONSerialization JSONObjectWithData:returnData options:NSJSONReadingAllowFragments error:error];
	}

	NSOperationQueue *queue = [[NSOperationQueue alloc] init];
	[NSURLConnection sendAsynchronousRequest:httpRequest
				queue:queue
				completionHandler:^(NSURLResponse *response, NSData *data, NSError *connectionError) {
					NSError *blockError = nil;
					if([_api verbose]) {
						NSLog(@"Response: %@", [data asUTF8String]);
					}

					NSDictionary *results = nil;

					if (connectionError) {
					    NSLog(@"Connection Error: %@", connectionError);
					    blockError = connectionError;
					} else if (data) {
					    results = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:&blockError];
					    if (blockError) NSLog(@"Error decoding JSON: %@", blockError);
					}

					dispatch_async(dispatch_get_main_queue(), ^{
					    completionHandler(results, blockError);
					});
				}];
	return nil;

}



+ (NSError *)errorWithDictionary:(NSDictionary *)dict {
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return nil;
	}
	if ([[dict allKeys] count] == 0) {
		return nil;
	}
	NSMutableDictionary *userInfo = [NSMutableDictionary alloc];
	id reason = [dict valueForKey:@"Reason"];
	if ([reason isKindOfClass:[NSDictionary class]]) {
		userInfo = [userInfo initWithDictionary:reason];
	} else {
		userInfo = [userInfo init];
	}
	[userInfo setObject:[dict valueForKey:@"Message"] forKey:NSLocalizedDescriptionKey];

	NSString *code = [dict valueForKey:@"Code"];
	NSNumberFormatter *f = [[NSNumberFormatter alloc] init];
	[f setNumberStyle:NSNumberFormatterDecimalStyle];
	NSNumber *codeNumber = [f numberFromString:code];
	NSInteger intCode = -1;
	if (codeNumber != nil) {
		intCode = [codeNumber integerValue];
	}
	NSError *err = [NSError errorWithDomain:@"{{$pkgName}}Error" code:intCode userInfo:userInfo];
	return err;
}

@end

{{range .DataObjects}}{{$do := .}}
// --- {{.Name}} ---
@implementation {{$apiprefix}}{{.Name}}
{{template "objc/properties_m" $do.Fields}}
@end
{{end}}

// === Interfaces ===

{{range .Interfaces}}{{$interface := .}}
{{range .Methods}}{{if .ConstructorForInterface}}{{else}}{{$method := .}}
// --- {{$apiprefix}}{{.Name}}Params ---
@implementation {{$apiprefix}}{{$interface.Name}}{{.Name}}Params : NSObject
{{template "objc/properties_m" .Params}}
@end

// --- {{$apiprefix}}{{.Name}}Results ---
@implementation {{$apiprefix}}{{$interface.Name}}{{.Name}}Results : NSObject
{{template "objc/properties_m" .Results}}
@end
{{end}}{{end}}{{end}}

{{range .Interfaces}}{{$interface := .}}
@implementation {{$apiprefix}}{{.Name}} : NSObject
{{with .Constructor}}
{{template "objc/properties_m" .Method.Params}}
{{else}}
- (NSDictionary*) dictionary {
	return [NSDictionary dictionaryWithObjectsAndKeys:nil];
}
{{end}}
{{range .Methods}}{{$method := .}}
// --- {{.Name}} ---
- {{with .ConstructorForInterface}}({{$apiprefix}}{{.Name}} *){{else}}({{$interface.Name | .ResultsForObjcFunction}}){{end}} {{.ParamsForObjcFunction}} {
	{{with .ConstructorForInterface}}
	{{$apiprefix}}{{.Name}} *results = [{{$apiprefix}}{{.Name}} alloc];
	{{range .Constructor.Method.Params}}{{$f := .ToLanguageField "objc"}}[results set{{$f.Name | title}}:{{$f.Name}}];
	{{end}}{{else}}
	{{$apiprefix}}{{$interface.Name}}{{.Name}}Results *results = [{{$apiprefix}}{{$interface.Name}}{{.Name}}Results alloc];
	{{$apiprefix}}{{$interface.Name}}{{.Name}}Params *params = [[{{$apiprefix}}{{$interface.Name}}{{.Name}}Params alloc] init];
	{{range .Params}}{{$f := .ToLanguageField "objc"}}[params set{{$f.Name | title}}:{{$f.Name}}];
	{{end}}
	{{$apiprefix}}{{$pkgName}} * _api = [{{$apiprefix}}{{$pkgName}} get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/{{$interface.Name}}/{{.Name}}.json", [_api baseURL]]];
	if([_api verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};
{{if $method.IsStreamInput}}
	NSDictionary * dict = [{{$apiprefix}}{{$pkgName}} request:url params:paramsDict stream:{{$method.StreamParamName}} error:&error completionHandler:nil];
{{else}}
	NSDictionary * dict = [{{$apiprefix}}{{$pkgName}} request:url params:paramsDict stream:nil error:&error completionHandler:nil];
{{end}}
	if(error != nil) {
		if([_api verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return {{$method.ObjcReturnResultsOrOnlyOne}};
	}
	results = [results initWithDictionary: dict];
	{{end}}
	return {{$method.ObjcReturnResultsOrOnlyOne}};
}

- (void) {{.ParamsForObjcFunctionWithCallback $apiprefix $interface.Name}} {
	{{with .ConstructorForInterface}}
		{{$apiprefix}}{{.Name}} *results = [{{$apiprefix}}{{.Name}} alloc];
		{{range .Constructor.Method.Params}}
			{{$f := .ToLanguageField "objc"}}[results set{{$f.Name | title}}:{{$f.Name}}];
		{{end}}
	{{else}}
		{{$apiprefix}}{{$interface.Name}}{{.Name}}Params *params = [[{{$apiprefix}}{{$interface.Name}}{{.Name}}Params alloc] init];
		{{range .Params}}{{$f := .ToLanguageField "objc"}}[params set{{$f.Name | title}}:{{$f.Name}}];
		{{end}}

		{{$apiprefix}}{{$pkgName}} * _api = [{{$apiprefix}}{{$pkgName}} get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/{{$interface.Name}}/{{.Name}}.json", [_api baseURL]]];
		if([_api verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}
		NSDictionary *paramsDict = @{@"This": [self dictionary], @"Params": [params dictionary]};
		NSError *nilerror = nil;
{{if $method.IsStreamInput}}
		[{{$apiprefix}}{{$pkgName}} request:url params:paramsDict stream:{{$method.StreamParamName}} error:&nilerror completionHandler:^(NSDictionary *data, NSError *error) {;
{{else}}
		[{{$apiprefix}}{{$pkgName}} request:url params:paramsDict stream:nil error:&nilerror completionHandler:^(NSDictionary *data, NSError *error) {;
{{end}}
			if (error && failureBlock) {
				if([_api verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
				return;
			}

			{{$apiprefix}}{{$interface.Name}}{{.Name}}Results *results = [{{$apiprefix}}{{$interface.Name}}{{.Name}}Results alloc];
			results = [results initWithDictionary: data];

			if ({{$method.ObjcErrorResultName}}) {
				if([_api verbose]) {
					NSLog(@"Service Error: %@", {{$method.ObjcErrorResultName}});
				}

				failureBlock({{$method.ObjcErrorResultName}});
				return;
			}

			if (successBlock) {
				successBlock({{$method.ObjcReturnResultsOrOnlyOne}});
			}
		}];
	{{end}}
}
{{end}}@end
{{end}}
{{end}}
